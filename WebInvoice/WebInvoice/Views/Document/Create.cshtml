@using WebInvoice.Dto.Document
@model VatDocumentDto
@inject WebInvoice.Services.IUserCompanyTemp userCompanyData
<form asp-controller="Document" asp-action="Create" id="form1" autocomplete="off">
    <h1 class="text-center">@userCompanyData.CompanyName </h1>
    <h2 class="text-center">Фактура: 0000000001</h2>

    <div class="card">
        <div class="card-header d-flex flex-row justify-content-between p-1">
            <div class="col-3 d-flex flex-column justify-content-center align-items-center ">
                <label for="findPartner" class="m-0 p-0">Получател: </label>
                <input type="text" id="findPartner" class="form-control" list="partnersDataList" oninput="findPartnerAjax()" onkeydown="loadPartner(event)" placeholder="Търси..." />
                <datalist id="partnersDataList"></datalist>
            </div>
            <h3 class="d-flex justify-content-center align-items-center col" id="partnerHead"></h3>
            <div class="col-3 d-flex justify-content-center align-items-center">
                <button id="partnerDescription" class="btn btn-outline-primary " type="button" data-toggle="collapse" data-target="#description" aria-expanded="false" aria-controls="description">
                    Подробности
                </button>
            </div>
        </div>

        <div class="collapse" id="description">
            <div class="card-body">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <th>Получател</th>
                            <td id="partner"></td>
                        </tr>
                        <tr>
                            <th>ЕИК</th>
                            <td id="eik"></td>
                        </tr>
                        <tr>
                            <th>Регистрация по ДДС</th>
                            <td id="isVatRegister"> </td>
                        </tr>
                        <tr>
                            <th>ДДС</th>
                            <td id="vat"></td>
                        </tr>
                        <tr>
                            <th>Адрес</th>
                            <td id="address"></td>
                        </tr>
                        <tr>
                            <th>МОЛ</th>
                            <td id="mol"></td>
                        </tr>
                        <tr>
                            <th>E-mail</th>
                            <td id="email"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="card text-center">

        <div class="card-body p-1">
            <div class="d-flex justify-content-center invisible" id="loading">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="col-12 m-0 d-flex flex-row">
                <div class="m-0 px-1 text-center" style="width:25px">№</div><div class="m-0 px-1 text-center" style="width:25px">П</div><div class="col-5 m-0 p-0">Наимование на стоката</div><div class="col m-0 p-0">Мярка</div><div class="col m-0 p-0">Количество</div><div class="col m-0 p-0">Цена</div><div class="col m-0 p-0">Сума</div><div class="col m-0 p-0">ДДС</div><div class="m-0 px-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                    </svg>
                </div>
            </div>
            <div id="productContainer">
                @if (Model.Sales != null)
                {
                    @*for (int i = 0; i < Model.Sales.Count; i++)
                        {
                            var readOnly = false;
                            if (Model.Sales[i].ProductId != 0)
                            {
                                readOnly = true;
                            }
                            <div class="col-12 m-0 d-flex flex-row productRow" id="row@(i)"><input type="hidden" asp-for="@Model.Sales[i].ProductId" class="productId"><input type="hidden" asp-for="@Model.Sales[i].FreeProductID" class="freeProductId"><span class="m-0 px-1 text-right productCount" style="width: 25px;">@(i+1)</span><input asp-for="@Model.Sales[i].IsProduct" onchange="changeIsProduct(this)" type="checkbox" class="m-auto px-1 text-right isProduct" style="width: 25px;"><input asp-for="@Model.Sales[i].Name" oninput="findProductAjax(this)" onkeydown="loadProduct(event, this)" list="productDataList" class="col-6 m-0 p-0 productName" type="text"><input asp-for="@Model.Sales[i].ProductType" readonly="@readOnly" class="col m-0 p-0 productType" type="text"><input asp-for="@Model.Sales[i].Quantity" onkeydown="calculatePrice(event, this)" placeholder="@Model.Sales[i].AvailableQuantity" class="col m-0 p-0 productQuantity" type="text"><input asp-for="@Model.Sales[i].Price" readonly="@readOnly" class="col m-0 p-0 productPrice" onkeydown="calculatePrice(event, this)" type="text"><input asp-for="@Model.Sales[i].TottalPrice" onkeydown="newLine(event, this)" class="col m-0 p-0 productTottalPrice" type="text"><span class="m-0 px-1 close productDelete" onclick="delete_row(this)">X</span></div>
                        }*@
                }
            </div>
            <datalist id="productDataList"></datalist>
            <div class="d-flex flex-row justify-content-end">
                <div class="btn btn-light btn-sm" onclick="addProductElement()">Нов ред</div>
            </div>
            <input asp-for="PartnerId" type="hidden" id="partnerId" />
            <div class="d-flex flex-row justify-content-end px-5" id="documentTottalByVatType">

                <div class="p-2" id="firstColumn">
                    <div class="p-0 m-0 font-weight-bold text-right">&nbsp </div>
                    <p class="p-0 m-0 font-weight-bold text-right">Основа:</p>
                    <p class="p-0 m-0 font-weight-bold text-right">ДДС:</p>
                    <p class="p-0 m-0 font-weight-bold text-right">Общо:</p>

                </div>

                <div id="tottalByVatType" class="d-flex flex-row">
                </div>
                <div class="p-2" id="tottalCulumn">
                    <p class="p-0 m-0 font-weight-bold text-right" id="tottalCulumnTittle">ОБЩО</p>
                    <p class="p-0 m-0 font-weight-bold text-right" id="tottalCulumnBasis">0.00</p>
                    <p class="p-0 m-0 font-weight-bold text-right" id="tottalCulumnVat">0.00</p>
                    <p class="p-0 m-0 font-weight-bold text-right" id="tottalCulumnTottal">0.00</p>

                </div>
            </div>

            @*<div  class="" data-toggle="tooltip" data-placement="top" title="Tooltip on topasaaaaasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss">
                    Tooltip on top
                    asas
                </div>*@
        </div>
        <div class="card-footer text-muted">
            <div class="d-flex flex-row">
                <div class="col-4 text-nowrap">
                    <label for="createdDate">Дата на документа</label>
                    <input class="form-control" asp-for="CreatedDate" type="text" id="createdDate" data-val="true" data-val-custom="Невалидна дата!" />
                    <label for="vatReasonDate">Дата на дан. събитите</label>
                    <input class="form-control" asp-for="VatReasonDate" type="text" id="vatReasonDate" data-val="true" data-val-custom="Невалидна дата!" />
                </div>
                <div class="col-4 text-nowrap">
                    <label for="writerEmployee">Съставил</label>
                    <input class="form-control" asp-for="WriterEmployeeId" list="writerEmployeeList" type="text" id="writerEmployee" value="MILKO" />
                    <datalist id="writerEmployeeList">
                        <option value="Edge"/>
                        <option value="Firefox"/>
                        <option value="Chrome" />
                        <option value="Opera"/>
                        <option value="Safari"/>
                    </datalist>
                    <label for="recipientEmployee">Получил</label>
                    <input class="form-control" asp-for="RecipientEmployeeId" type="text" id="recipientEmployee" />
                </div>
                <div class="col-4 text-nowrap">
                    <label for="paymentType">Начин на плащане</label>
                    <select class="form-control" asp-for="PaymentTypeId" type="text" id="paymentType"></select>
                    <label for="bankAccount">Бакова сметка</label>
                    <select class="form-control" asp-for="BankAccountId" type="text" id="bankAccount"></select>
                </div>
            </div>
            <div class="d-flex flex-row">
                <div class="col">
                    <label for="Description"> Описание</label>
                    <input asp-for="Description" class="form-control" id="Description" />
                </div>
                <div class="col-2">
                    <div>&nbsp;</div>
                    <button type="submit" class="btn btn-info">Потвърди</button>
                </div>
                <div class="col">
                    <label for="FreeText"> Основание за неначисляване на ДДС</label>
                    <input asp-for="FreeText" class="form-control" id="FreeText" />
                </div>
            </div>
        </div>
    </div>
    
</form>
@section Styles {
    <link rel="stylesheet" href="~/css/document.css" />
}
@section Scripts{
    <script type="text/javascript">
        $(function () {
            $("#createdDate").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: "dd.mm.yy",
                showAnim: "clip",
            });

            $("#vatReasonDate").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: "dd.mm.yy",
                showAnim: "clip",
            });
        });

        $.validator.addMethod('custom', function (value, element, params) {
                return validatedate(value);
        }, "Невалидна дата!");

        jQuery.validator.unobtrusive.adapters.add("custom", {}, function (options) {
            options.rules["custom"] = true;
            options.messages["custom"] = function () { return $(options.element).attr('data-val-custom'); };
        });
      
        //function submit() {
        //    $("#form1").validate();
        //    if ($('#form1').valid())
        //        $('#form1').submit();
        //}

        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })

        document.getElementById('findPartner').focus();
        var partnerDataListValues = [];
        var loadedPartner = document.getElementById('partnerId').value;

        preventEnter();

        var productContainer = document.getElementById('productContainer');

        if (loadedPartner != "") {
            loadPartnerById(loadedPartner);
        }

        var vatTypes = tryParseJSON('@Html.Raw(ViewBag.VatTypes)');
            //console.log(vatTypes);
        var salesJson = tryParseJSON('@Html.Raw(ViewBag.SalesJson)');
            //console.log(salesJson);

        if (salesJson != null) {
            for (var i = 0; i < salesJson.length; i++) {
                addProductElementWithValues(salesJson[i]);
            }
            calculateDocumentTottal();
        }

       
        function tryParseJSON(jsonString) {
            try {
                var o = JSON.parse(jsonString);

                // Handle non-exception-throwing cases:
                // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
                // but... JSON.parse(null) returns null, and typeof null === "object",
                // so we must check for that, too. Thankfully, null is falsey, so this suffices:
                if (o && typeof o === "object") {
                    return o;
                }
            }
            catch (e) { }

            return false;
        };

        function delete_row(e) {
            e.parentNode.parentNode.removeChild(e.parentNode);
            setIdAndName();
            calculateDocumentTottal();
        }

        function newLine(event, element) {
            if (event.keyCode == 9) {

                if ((productContainer.childElementCount -1) == getIndex(element.id)) {

                    event.preventDefault();
                    addProductElement();
                }
            }
        }

        function getIndex(str) {
            const regex = /\d+/;
            let result = str.match(regex);
            return result[0];
        }

        function setIdAndName() {

            for (var i = 0; i < productContainer.childElementCount; i++) {

                var items = productContainer.children[i].children;
                items[0].id = `Sales_${i}__ProductId`;
                items[0].name = `Sales[${i}].ProductId`;
                items[1].id = `Sales_${i}__FreeProductId`;
                items[1].name = `Sales[${i}].FreeProductId`;
                items[2].innerHTML = i + 1;
                items[3].id = `Sales_${i}__IsProduct`;
                items[3].name = `Sales[${i}].IsProduct`;
                items[4].id = `Sales_${i}__Name`;
                items[4].name = `Sales[${i}].Name`;
                items[5].id = `Sales_${i}__ProductType`;
                items[5].name = `Sales[${i}].ProductType`;
                items[6].id = `Sales_${i}__Quantity`;
                items[6].name = `Sales[${i}].Quantity`;
                items[7].id = `Sales_${i}__Price`;
                items[7].name = `Sales[${i}].Price`;
                items[8].id = `Sales_${i}__TottalPrice`;
                items[8].name = `Sales[${i}].TottalPrice`;
                items[9].id = `Sales_${i}__VatTypeId`;
                items[9].name = `Sales[${i}].VatTypeId`;

            }
        }

        function calculatePrice(event, element) {
            if (event.keyCode === 13 || event.keyCode === 9) {
                element.value = changeComma(element.value);
                let index = getIndex(element.id);
                if (`Sales_${index}__Quantity` == element.id) {
                    let priceElement = document.getElementById(`Sales_${index}__Price`);
                    let tottalPrice = document.getElementById(`Sales_${index}__TottalPrice`);
                    let quantity = Number.parseFloat(element.value);
                    let price = Number.parseFloat(priceElement.value);
                    if (isNaN(quantity) || element.value == null || element.value == '') {
                        quantity = 0;
                    }
                    if (isNaN(price) || priceElement.value == null || priceElement.value == '' ) {
                        price = 0;
                    }

                    tottalPrice.value = (quantity * price).toFixed(3);
                    tottalPrice.readOnly = true;

                }
                else if (`Sales_${index}__Price` == element.id) {
                    let quantityElement = document.getElementById(`Sales_${index}__Quantity`);
                    let tottalPrice = document.getElementById(`Sales_${index}__TottalPrice`);
                    let quantity = Number.parseFloat(quantityElement.value);
                    let price = Number.parseFloat(element.value);
                    if (isNaN(quantity) || quantityElement.value == null || quantityElement.value == '') {
                        quantity = 0;
                    }
                    if (isNaN(price) || element.value == null || element.value == '') {
                        price = 0;
                    }

                    tottalPrice.value = (price * quantity).toFixed(3);
                    tottalPrice.readOnly = true;

                }
                calculateDocumentTottal(element);
            }
        }

        function loadProduct(event , element) {
            if (event.keyCode === 13 || event.keyCode === 9) {

                var value = element.value;
                let rowId = getIndex(element.id);
                let isProduct = document.getElementById(`Sales_${getIndex(rowId)}__IsProduct`);

                if (value != null && value != '' && isProduct.checked == true) {

                    var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Product/GetProductByNameAjax?name=";

                    var loading = document.getElementById('loading');
                    loading.classList.remove('invisible');
                    var xhttp = new XMLHttpRequest();
                    xhttp.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            let item = JSON.parse(this.responseText);
                            loading.classList.add('invisible');


                            if (item != null && isProduct.checked == true) {
                                isProduct.value = true;
                                if (item.productId != null && item.productId != '') {

                                let productId = document.getElementById(`Sales_${rowId}__ProductId`);
                                productId.value = item.productId;

                                if (item.productType != null && item.productType != '') {
                                    let quantityType = document.getElementById(`Sales_${rowId}__ProductType`);
                                    quantityType.readOnly = true;
                                    quantityType.value = item.productType;

                                }
                                if (item.availableQuantity != null && item.availableQuantity != '') {
                                    let quantity = document.getElementById(`Sales_${rowId}__Quantity`);
                                    quantity.setAttribute('data-availableQuantity', item.availableQuantity);
                                    quantity.setAttribute('placeholder', item.availableQuantity);
                                    quantity.value = '';
                                }

                                if (item.price != null && item.price != '') {
                                    let price = document.getElementById(`Sales_${rowId}__Price`);
                                    price.value = item.price.toFixed(3);
                                    price.readOnly = true;
                                    }

                                    let tottalPrice = document.getElementById(`Sales_${rowId}__TottalPrice`);
                                    tottalPrice.value = '';
                                }
                                setActiveVatType(rowId, item.vatTypeId);


                            }
                            else {
                                let productId = document.getElementById(`Sales_${rowId}__ProductId`);
                                productId.value = 0;

                                let quantityType = document.getElementById(`Sales_${rowId}__ProductType`);
                                quantityType.readOnly = false;

                                let price = document.getElementById(`Sales_${rowId}__Price`);
                                price.readOnly = false;
                                isProduct.checked = false;
                                isProduct.value = false;
                            }
                            }

                    };
                    xhttp.open("GET", `${route}${value}`, true);
                    xhttp.send();
                }
            }
        }

        function loadProductOnChangeIsProduct(element) {

            var value = element.value;
            let rowId = getIndex(element.id);
            let isProduct = document.getElementById(`Sales_${getIndex(rowId)}__IsProduct`);

                if (value != null && value != '') {

                    var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Product/GetProductByNameAjax?name=";

                    var loading = document.getElementById('loading');
                    loading.classList.remove('invisible');
                    var xhttp = new XMLHttpRequest();
                    xhttp.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            let item = JSON.parse(this.responseText);
                            loading.classList.add('invisible');


                            if (item != null && isProduct.checked == true) {
                                isProduct.value = true;
                                if (item.productId != null && item.productId != '') {

                                let productId = document.getElementById(`Sales_${rowId}__ProductId`);
                                productId.value = item.productId;

                                if (item.productType != null && item.productType != '') {
                                    let quantityType = document.getElementById(`Sales_${rowId}__ProductType`);
                                    quantityType.readOnly = true;
                                    quantityType.value = item.productType;

                                }
                                if (item.availableQuantity != null && item.availableQuantity != '') {
                                    let quаntity = document.getElementById(`Sales_${rowId}__Quantity`);
                                    quаntity.setAttribute('data-availableQuantity', item.availableQuantity);
                                    quаntity.setAttribute('placeholder', item.availableQuantity);
                                }

                                if (item.price != null && item.price != '') {
                                    let price = document.getElementById(`Sales_${rowId}__Price`);
                                    price.value = item.price.toFixed(3);
                                    price.readOnly = true;
                                    }
                                    setActiveVatType(rowId, item.vatTypeId);
                                }


                            }
                            else {
                                let productId = document.getElementById(`Sales_${rowId}__ProductId`);
                                productId.value = 0;

                                let quantityType = document.getElementById(`Sales_${rowId}__ProductType`);
                                quantityType.readOnly = false;

                                let price = document.getElementById(`Sales_${rowId}__Price`);
                                price.readOnly = false;
                                isProduct.checked = false;
                                isProduct.value = false;
                            }
                            }

                    };
                    xhttp.open("GET", `${route}${value}`, true);
                    xhttp.send();
                }

        }

        function changeIsProduct(element) {
            if (element.checked === true) {
                let nameElement = document.getElementById(`Sales_${getIndex(element.id)}__Name`);
                loadProductOnChangeIsProduct(nameElement);
            }
            else {
                let rowId = getIndex(element.id);
                let productId = document.getElementById(`Sales_${rowId}__ProductId`);
                productId.value = 0;

                let quantityType = document.getElementById(`Sales_${rowId}__ProductType`);
                quantityType.readOnly = false;

                let price = document.getElementById(`Sales_${rowId}__Price`);
                price.readOnly = false;

                let isProduct = document.getElementById(`Sales_${getIndex(rowId)}__IsProduct`);
                isProduct.checked = false;
                isProduct.value = false;

                setAllActiveVatType(rowId);
            }
        }

        function findProductAjax(e) {
            if (e.value.length < 2) {
                return;
            }

            let isProduct = document.getElementById(`Sales_${getIndex(e.id)}__IsProduct`).checked;
            if (isProduct === true) {

            var dataList = document.getElementById('productDataList');
            var value = e.value;
            var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Product/FindProductDataListAjax?name=";
            if (value != '' && !partnerDataListValues.includes(value)) {

            var loading = document.getElementById('loading');
            loading.classList.remove('invisible');
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let result = JSON.parse(this.responseText);
                    dataList.innerHTML = "";
                    loading.classList.add('invisible');
                    partnerDataListValues = [];
                    result.forEach(function (item) {

                        var option = document.createElement('option');
                        option.value = item.name;
                        option.id = item.id;
                        partnerDataListValues.push(item.name);
                        dataList.appendChild(option);

                    });
                }
            };
            xhttp.open("GET", `${route}${value}`, true);
                xhttp.send();
            }
            }


        }

        function setActiveVatType(row, vatId){

            let elementVat = document.getElementById(`Sales_${row}__VatTypeId`);
            let optionsVat = elementVat.children;
            for (var i = 0; i < optionsVat.length; i++) {
                if (optionsVat[i].value == vatId) {
                    optionsVat[i].selected = true;
                    optionsVat[i].disabled = false;
                } else {
                    optionsVat[i].disabled = true;
                }
            }
        }

        function setAllActiveVatType(row) {

            let elementVat = document.getElementById(`Sales_${row}__VatTypeId`);
            let optionsVat = elementVat.children;
            for (var i = 0; i < optionsVat.length; i++) {
                optionsVat[i].disabled = false;
            }
        }

        function calculateDocumentTottal() {
            let cell = document.getElementsByClassName('VatTypeClass');

            let map = new Map();
            for (var i = 0; i < cell.length; i++) {
                let vatId = cell[i].value;
                console.log(vatId);
                console.log(cell[i].id);
                let tottalPriceElement = document.getElementById(`Sales_${getIndex(cell[i].id)}__TottalPrice`);
                let tottalPrice = parseFloat(tottalPriceElement.value);
                console.log(tottalPrice);

                if (map.has(vatId)) {
                    map.set(vatId, map.get(vatId) + tottalPrice);
                }
                else {
                    map.set(vatId, tottalPrice);
                }
            }

            let vatTypeContainer = document.getElementById('tottalByVatType');

            let vatTypeContainerChild = vatTypeContainer.children;
            if (vatTypeContainerChild != null) {
                for (var i = 0; i < vatTypeContainerChild.length; i++) {
                    let index = getIndex(vatTypeContainerChild[i].id);
                    if (!map.has(index)) {
                        vatTypeContainerChild[i].remove();
                    }
                }
            }

            let tottalPriceBasis = 0.0;
            let tottalPriceVat = 0.0;
            let tottalPriceTottal = 0.0;

            for (let [key, value] of map) {
                console.log(key + '=' + value)
                let vatTypeElement = document.getElementById(`vatType-${key}`);
                if (vatTypeElement == null) {
                    let divVatTypeElement = document.createElement('div');
                    divVatTypeElement.classList.add('p-2' );
                    divVatTypeElement.id = `vatType-${key}`;

                    let currentVatType = vatTypes.find(x => x.Id == key);

                    let vatTypeTittle = document.createElement('p');
                    vatTypeTittle.classList.add('p-0', 'm-0', 'text-right', 'font-weight-bold', `vatTypeTittle-${key}`);
                    vatTypeTittle.id = `vatTypeTittle-${key}`;
                    vatTypeTittle.innerHTML = `ДДС-${currentVatType.Percantage}%`;
                    divVatTypeElement.appendChild(vatTypeTittle);

                    let vatTypeBasis = document.createElement('p');
                    vatTypeBasis.classList.add('p-0', 'm-0', 'text-right', `vatTypeBasis-${key}`);
                    vatTypeBasis.id = `vatTypeBasis-${key}`;
                    tottalPriceBasis += value;
                    vatTypeBasis.innerHTML = value.toFixed(3);
                    divVatTypeElement.appendChild(vatTypeBasis);

                    let vatTypeVat = document.createElement('p');
                    vatTypeVat.classList.add('p-0', 'm-0', 'text-right', `vatTypeVat-${key}`);
                    vatTypeVat.id = `vatTypeVat-${key}`;
                    let vat = value * (parseFloat(currentVatType.Percantage) / 100);
                    tottalPriceVat += vat;
                    vatTypeVat.innerHTML = vat.toFixed(3);
                    divVatTypeElement.appendChild(vatTypeVat);

                    let vatTypeTottal = document.createElement('p');
                    vatTypeTottal.classList.add('p-0', 'm-0', 'text-right', `vatTypeTottal-${key}`);
                    vatTypeTottal.id = `vatTypeTottal-${key}`;
                    let tottal = value + vat;
                    tottalPriceTottal += tottal;
                    vatTypeTottal.innerHTML = tottal.toFixed(3);
                    divVatTypeElement.appendChild(vatTypeTottal);

                    vatTypeContainer.appendChild(divVatTypeElement);
                }
                else {

                    let currentVatType = vatTypes.find(x => x.Id == key);

                    let vatTypeBasis = document.getElementById(`vatTypeBasis-${key}`);
                    tottalPriceBasis += value;
                    vatTypeBasis.innerHTML = value.toFixed(3);

                    let vatTypeVat = document.getElementById(`vatTypeVat-${key}`);
                    let vat = value * (parseFloat(currentVatType.Percantage) / 100);
                    tottalPriceVat += vat;
                    vatTypeVat.innerHTML = vat.toFixed(3);

                    let vatTypeTottal = document.getElementById(`vatTypeTottal-${key}`);
                    let tottal = value + vat;
                    tottalPriceTottal += tottal;
                    vatTypeTottal.innerHTML = tottal.toFixed(3);

                }
            }

            document.getElementById('tottalCulumnBasis').innerHTML = tottalPriceBasis.toFixed(3);
            document.getElementById('tottalCulumnVat').innerHTML = tottalPriceVat.toFixed(3);
            document.getElementById('tottalCulumnTottal').innerHTML = tottalPriceTottal.toFixed(3);
        }

        function addProductElementWithValues(value) {

            let index = document.getElementById('productContainer').childElementCount;

            let product = document.createElement('div');
            product.classList.add('col-12', 'm-0', 'd-flex', 'flex-row', 'productRow');
            product.id = `row${index}`;

            let productId = document.createElement('input');
            productId.setAttribute('type', 'hidden');
            productId.id = `Sales_${index}__ProductId`;
            productId.name = `Sales[${index}].ProductId`;
            productId.classList.add('productId');
            productId.value = value.ProductId;
            product.appendChild(productId);



            let freeProductId = document.createElement('input');
            freeProductId.setAttribute('type', 'hidden');
            freeProductId.id = `Sales_${index}__FreeProductId`;
            freeProductId.name = `Sales[${index}].FreeProductId`;
            freeProductId.classList.add('freeProductId');
            freeProductId.value = value.FreeProductId;
            product.appendChild(freeProductId);



            let productCount = document.createElement('span')
            productCount.classList.add('m-0', 'px-1', 'text-right');
            productCount.style.width = '30px';
            productCount.innerHTML = index + 1;
            productCount.classList.add('productCount');
            product.appendChild(productCount);

            let isProduct = document.createElement('input');
            isProduct.setAttribute('type', 'checkbox');
            isProduct.setAttribute('data-val', 'true');
            isProduct.setAttribute('data-val-required', 'Полето е задължително');
            isProduct.classList.add('m-auto', 'px-1', 'text-right', 'isProduct');
            isProduct.style.width = '25px';
            isProduct.id = `Sales_${index}__IsProduct`;
            isProduct.name = `Sales[${index}].IsProduct`;
            isProduct.checked = value.IsProduct;
            isProduct.value = value.IsProduct;
            isProduct.addEventListener('change', function () { changeIsProduct(this) });
            product.appendChild(isProduct);

            let productName = document.createElement('input');
            productName.classList.add('col-5', 'm-0', 'p-0');
            productName.setAttribute('type', 'text');
            productName.setAttribute('data-val', 'true');
            productName.setAttribute('data-val-required', 'Полето е задължително');
            productName.setAttribute('list', 'productDataList');
            productName.id = `Sales_${index}__Name`;
            productName.name = `Sales[${index}].Name`;
            productName.classList.add('productName');
            productName.addEventListener('input', function () { findProductAjax(this) });
            productName.addEventListener('keydown', function () { loadProduct(event, this) });
            productName.value = value.Name;
            product.appendChild(productName);

            let productType = document.createElement('input');
            productType.classList.add('col', 'm-0', 'p-0');
            productType.setAttribute('type', 'text');
            productType.setAttribute('data-val', 'true');
            productType.setAttribute('data-val-required', 'Полето е задължително');
            productType.id = `Sales_${index}__ProductType`;
            productType.name = `Sales[${index}].ProductType`;
            productType.classList.add('productType');
            productType.value = value.ProductType;
            productType.readOnly = value.IsProduct;
            product.appendChild(productType);


            let productQuantity = document.createElement('input');
            productQuantity.classList.add('col', 'm-0', 'p-0');
            productQuantity.setAttribute('type', 'text');
            productQuantity.setAttribute('data-val', 'true');
            productQuantity.setAttribute('data-val-required', 'Полето е задължително');
            productQuantity.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productQuantity.id = `Sales_${index}__Quantity`;
            productQuantity.name = `Sales[${index}].Quantity`;
            productQuantity.classList.add('productQuantity');
            productQuantity.addEventListener('keydown', function () { calculatePrice(event, this) });
            productQuantity.value = value.Quantity;
            product.appendChild(productQuantity);

            let productPrice = document.createElement('input');
            productPrice.classList.add('col', 'm-0', 'p-0');
            productPrice.setAttribute('type', 'text');
            productPrice.setAttribute('data-val', 'true');
            productPrice.setAttribute('data-val-required', 'Полето е задължително');
            productPrice.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productPrice.id = `Sales_${index}__Price`;
            productPrice.name = `Sales[${index}].Price`;
            productPrice.classList.add('productPrice');
            productPrice.addEventListener('keydown', function () { calculatePrice(event, this) });
            productPrice.value = value.Price.toFixed(3);
            productPrice.readOnly = value.IsProduct;
            product.appendChild(productPrice);

            let productTottal = document.createElement('input');
            productTottal.classList.add('col', 'm-0', 'p-0');
            productTottal.setAttribute('type', 'text');
            productTottal.setAttribute('data-val', 'true');
            productTottal.setAttribute('data-val-required', 'Полето е задължително');
            productTottal.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productTottal.id = `Sales_${index}__TottalPrice`;
            productTottal.name = `Sales[${index}].TottalPrice`;
            productTottal.classList.add('productTottalPrice');
            productTottal.addEventListener('keydown', function () { newLine(event, this) });
            productTottal.value = value.TottalPrice.toFixed(3);
            productTottal.readOnly = true;
            product.appendChild(productTottal);

            let productVatType = document.createElement('select');
            productVatType.classList.add('col', 'm-0', 'p-0', 'VatTypeClass');
            productVatType.id = `Sales_${index}__VatTypeId`;
            productVatType.name = `Sales[${index}].VatTypeId`;
            productVatType.setAttribute('form', 'form1');
            productVatType.setAttribute('data-val', 'true');
            productVatType.setAttribute('data-val-required', 'Полето е задължително');
            productVatType.addEventListener('change', function () { calculateDocumentTottal(this) });
            if (vatTypes) {
                for (var i = 0; i < vatTypes.length; i++) {
                    let option = document.createElement('option');
                    option.value = vatTypes[i].Id;
                    option.innerHTML = `${vatTypes[i].Name}-${vatTypes[i].Percantage}%`;
                    if (value.IsProduct) {
                        if (value.VatTypeId == vatTypes[i].Id) {
                            option.disabled = false;
                        }
                        else {
                            option.disabled = true;
                        }
                    }
                    else {
                        if (value.VatTypeId == vatTypes[i].Id) {
                            option.selected = true;
                        }
                    }

                    productVatType.add(option);
                }

            }

            product.appendChild(productVatType);

            let productDelete = document.createElement('span')
            productDelete.classList.add('m-0', 'px-1', 'close');
            productDelete.innerHTML = 'X';
            productDelete.addEventListener('click', function () { delete_row(this) });
            productDelete.classList.add('productDelete');
            product.appendChild(productDelete);


            document.getElementById('productContainer').appendChild(product);
            productName.focus();
            $("#form1")
                .removeData("validator")
                .removeData("unobtrusiveValidation");

            //Parse the form again
            $.validator
                .unobtrusive
                .parse("#form1");
        }

        function addProductElement() {

            let index = document.getElementById('productContainer').childElementCount;

            let product = document.createElement('div');
            product.classList.add('col-12', 'm-0', 'd-flex', 'flex-row', 'productRow');
            product.id = `row${index}`;

            let productId = document.createElement('input');
            productId.setAttribute('type', 'hidden');
            productId.id = `Sales_${index}__ProductId`;
            productId.name = `Sales[${index}].ProductId`;
            productId.classList.add('productId');
            product.appendChild(productId);

            let freeProductId = document.createElement('input');
            freeProductId.setAttribute('type', 'hidden');
            freeProductId.id = `Sales_${index}__FreeProductId`;
            freeProductId.name = `Sales[${index}].FreeProductId`;
            freeProductId.classList.add('freeProductId');
            product.appendChild(freeProductId);


            let productCount = document.createElement('span')
            productCount.classList.add('m-0', 'px-1', 'text-right');
            productCount.style.width='30px';
            productCount.innerHTML = productContainer.childElementCount + 1;
            productCount.classList.add('productCount');
            product.appendChild(productCount);

            let isProduct = document.createElement('input');
            isProduct.setAttribute('type', 'checkbox');
            isProduct.setAttribute('data-val', 'true');
            isProduct.setAttribute('data-val-required', 'Полето е задължително');
            isProduct.classList.add('m-auto', 'px-1', 'text-right', 'isProduct');
            isProduct.style.width = '25px';
            isProduct.id = `Sales_${index}__IsProduct`;
            isProduct.name = `Sales[${index}].IsProduct`;
            isProduct.checked = true;
            isProduct.value = true;
            isProduct.addEventListener('change', function () { changeIsProduct(this) });
            product.appendChild(isProduct);

            let productName = document.createElement('input');
            productName.classList.add('col-5', 'm-0', 'p-0');
            productName.setAttribute('type', 'text');
            productName.setAttribute('data-val', 'true');
            productName.setAttribute('data-val-required', 'Полето е задължително');
            productName.setAttribute('list', 'productDataList');
            productName.id = `Sales_${index}__Name`;
            productName.name = `Sales[${index}].Name`;
            productName.classList.add('productName');
            productName.addEventListener('input', function () { findProductAjax(this) });
            productName.addEventListener('keydown', function () { loadProduct(event, this) });
            product.appendChild(productName);

            let productType = document.createElement('input');
            productType.classList.add('col', 'm-0', 'p-0');
            productType.setAttribute('type', 'text');
            productType.setAttribute('data-val', 'true');
            productType.setAttribute('data-val-required', 'Полето е задължително');
            productType.id = `Sales_${index}__ProductType`;
            productType.name = `Sales[${index}].ProductType`;
            productType.classList.add('productType');
            product.appendChild(productType);


            let productQuantity = document.createElement('input');
            productQuantity.classList.add('col', 'm-0', 'p-0');
            productQuantity.setAttribute('type', 'text');
            productQuantity.setAttribute('data-val', 'true');
            productQuantity.setAttribute('data-val-required', 'Полето е задължително');
            productQuantity.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productQuantity.id = `Sales_${index}__Quantity`;
            productQuantity.name = `Sales[${index}].Quantity`;
            productQuantity.classList.add('productQuantity');
            productQuantity.addEventListener('keydown', function () { calculatePrice(event, this) });
            product.appendChild(productQuantity);

            let productPrice = document.createElement('input');
            productPrice.classList.add('col', 'm-0', 'p-0');
            productPrice.setAttribute('type', 'text');
            productPrice.setAttribute('data-val', 'true');
            productPrice.setAttribute('data-val-required', 'Полето е задължително');
            productPrice.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productPrice.id = `Sales_${index}__Price`;
            productPrice.name = `Sales[${index}].Price`;
            productPrice.classList.add('productPrice');
            productPrice.addEventListener('keydown', function () { calculatePrice(event, this) });
            product.appendChild(productPrice);

            let productTottal = document.createElement('input');
            productTottal.classList.add('col', 'm-0', 'p-0');
            productTottal.setAttribute('type', 'text');
            productTottal.setAttribute('data-val', 'true');
            productTottal.setAttribute('data-val-required', 'Полето е задължително');
            productTottal.setAttribute('data-val-number', 'Стойноста трябва да е число');
            productTottal.id = `Sales_${index}__TottalPrice`;
            productTottal.name = `Sales[${index}].TottalPrice`;
            productTottal.classList.add('productTottalPrice');
            productTottal.addEventListener('keydown', function () { newLine(event, this) });
            product.appendChild(productTottal);

            let productVatType = document.createElement('select');
            productVatType.classList.add('col', 'm-0', 'p-0', 'VatTypeClass');
            productVatType.id = `Sales_${index}__VatTypeId`;
            productVatType.name = `Sales[${index}].VatTypeId`;
            productVatType.setAttribute('form', 'form1');
            productVatType.setAttribute('data-val', 'true');
            productVatType.setAttribute('data-val-required', 'Полето е задължително');
            productVatType.addEventListener('change', function () { calculateDocumentTottal(this) });
            if (vatTypes) {
                for (var i = 0; i < vatTypes.length; i++) {
                    let option = document.createElement('option');
                    option.value = vatTypes[i].Id;
                    option.innerHTML = `${vatTypes[i].Name}-${vatTypes[i].Percantage}%`;
                    if (vatTypes[i].IsActive) {
                        option.selected = true;
                    }
                    productVatType.add(option);
                }

            }

            product.appendChild(productVatType);

            let productDelete = document.createElement('span')
            productDelete.classList.add( 'm-0', 'px-1', 'close');
            productDelete.innerHTML = 'X';
            productDelete.addEventListener('click', function () { delete_row(this) });
            productDelete.classList.add('productDelete');
            product.appendChild(productDelete);


            document.getElementById('productContainer').appendChild(product);
            productName.focus();
            $("#form1")
                .removeData("validator")
                .removeData("unobtrusiveValidation");

            //Parse the form again
            $.validator
                .unobtrusive
                .parse("#form1");
        }

        function changeComma(value) {
            value = value.replace(',', '.');
            return value;
        }

        function findPartnerAjax() {
            var dataList = document.getElementById('partnersDataList');
            var value = document.getElementById('findPartner').value;
            var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Partner/FindPartnerDataListAjax?name=";
            if (value != '' && !partnerDataListValues.includes(value)) {

            var loading = document.getElementById('loading');
            loading.classList.remove('invisible');
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let result = JSON.parse(this.responseText);
                    dataList.innerHTML = "";
                    loading.classList.add('invisible');
                    partnerDataListValues = [];
                    result.forEach(function (item) {

                        var option = document.createElement('option');
                        option.value = item.name;
                        option.id = item.id;
                        partnerDataListValues.push(item.name);
                        dataList.appendChild(option);

                    });
                }
            };
            xhttp.open("GET", `${route}${value}`, true);
                xhttp.send();
            }
        }

        function loadPartner(event) {
            if (event.keyCode === 13 || event.keyCode === 9) {
                event.preventDefault();
                var value = document.getElementById('findPartner').value;
                var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Partner/GetPartnerByNameAjax?name=";

                var loading = document.getElementById('loading');
                loading.classList.remove('invisible');
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        let item = JSON.parse(this.responseText);
                        loading.classList.add('invisible');
                        document.getElementById('partnerId').value = item.id;
                        document.getElementById('partnerHead').innerText = item.name;
                        document.getElementById('partner').innerText = item.name;
                        document.getElementById('eik').innerText = item.eik;
                        document.getElementById('isVatRegister').innerText = item.isVatRegistered == true ? "ДА" : "НЕ";
                        document.getElementById('vat').innerText = item.vatId;
                        document.getElementById('address').innerText = `${item.country}, ${item.city}, ${item.address}`;
                        document.getElementById('mol').innerText = item.mol;
                        document.getElementById('email').innerText = item.email;

                        document.getElementById('partnerDescription').focus();

                    }
                };
                xhttp.open("GET", `${route}${value}`, true);
                xhttp.send();
            }
        }

        function loadPartnerById(value) {

            var route = "/@userCompanyData.CompanySlug/@userCompanyData.CompanyObjectSlug/Partner/GetPartnerByIdAjax?id=";

            var loading = document.getElementById('loading');
            loading.classList.remove('invisible');
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let item = JSON.parse(this.responseText);
                    loading.classList.add('invisible');
                    document.getElementById('partnerId').value = item.id;
                    document.getElementById('partnerHead').innerText = item.name;
                    document.getElementById('partner').innerText = item.name;
                    document.getElementById('eik').innerText = item.eik;
                    document.getElementById('isVatRegister').innerText = item.isVatRegistered == true ? "ДА":"НЕ";
                    document.getElementById('vat').innerText =item.vatId;
                    document.getElementById('address').innerText = `${item.country }, ${item.city}, ${item.address}`;
                    document.getElementById('mol').innerText = item.mol;
                    document.getElementById('email').innerText = item.email;

                }
            };
            xhttp.open("GET", `${route}${value}`, true);
            xhttp.send();
            }

        function nullCheck(string) {
            if (string == null ) {
                return '';
            }
            return string;
        }

        function preventEnter() {
            $('#productContainer').on('keydown', 'input, select, textarea', function (e) {
                var self = $(this)
                    , form = self.parents('form:eq(0)')
                    , focusable
                    , next
                    , prev
                    ;

                if (e.shiftKey) {
                    if (e.keyCode == 13) {
                        focusable = form.find('input,a,select,button,textarea').filter(':visible');
                        prev = focusable.eq(focusable.index(this) - 1);

                        if (prev.length) {
                            prev.focus();
                        } else {
                            form.submit();
                        }
                    }
                }
                else
                    if (e.keyCode == 13) {
                        focusable = form.find('input,a,select,button,textarea').filter(':visible');
                        next = focusable.eq(focusable.index(this) + 1);
                        if (next.length) {
                            next.focus();
                        } else {
                            form.submit();
                        }
                        return false;
                    }
            });
        }

        function validatedate(inputText) {
            const dateformat = /^(0?[1-9]|[12][0-9]|3[01])[\.](0?[1-9]|1[012])[\.]\d{4}$/;
            // Match the date format through regular expression
            let regex = new RegExp(dateformat);

            if (regex.test(inputText)) {
                //Test which seperator is used '/' or '-'
                var opera1 = inputText.split('.');
                lopera1 = opera1.length;

                // Extract the string into month, date and year
                if (lopera1 > 1) {
                    var pdate = inputText.split('.');
                }
                else {
                    return false;
                }
                var dd = parseInt(pdate[0]);
                var mm = parseInt(pdate[1]);
                var yy = parseInt(pdate[2]);
                // Create list of days of a month [assume there is no leap year by default]
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (mm == 1 || mm > 2) {
                    if (dd > ListofDays[mm - 1]) {
                        return false;
                    }
                }
                if (mm == 2) {
                    var lyear = false;
                    if ((!(yy % 4) && yy % 100) || !(yy % 400)) {
                        lyear = true;
                    }
                    if ((lyear == false) && (dd >= 29)) {
                        return false;
                    }
                    if ((lyear == true) && (dd > 29)) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return false;
            }
        }

    </script>
}
